#!/usr/bin/env python2
from __future__ import division
import os.path
import re

def log_filename(role, node_id, exp_id):
    if role not in ['AUV', 'NODE']:
        raise ValueError('Unknown role')
    return 'Uwpolling_%(role)s_%(node_id)d_%(exp_id)d.out' % \
        {'role': role, 'node_id': node_id, 'exp_id': exp_id}

def process_logfile(fname, function, counters):
    with open(fname, 'r') as f:
        for line in f:
            function(counters, line)
    
def process_auv_line(counters, line):
    # Keep the last time
    m = re.match('([\d\.]+)Uwpolling.*', line)
    if not m:
        raise RuntimeError('All lines should match')
    counters['last_auv_time'] = float(m.group(1))

    # Count the received packets
    m = re.match('.*RX_DATA_ID_\d+_FROM_NODE_(\d+)', line)
    if m:
        n_id = int(m.group(1))
        
        tot = counters.setdefault('pkt_rx_total', 0)
        pernode = counters.setdefault('pkt_rx_node', dict())
        node = pernode.setdefault(n_id, 0)
        
        counters['pkt_rx_total'] = tot + 1
        pernode[n_id] = node + 1
        return

    # Count the trigger pkts sent
    m = re.match('.*TX_TRIGGER', line)
    if m:
        cnt = counters.setdefault('trigger_tx', 0)
        counters['trigger_tx'] = cnt + 1
        return

    # Count the poll pkts sent
    m = re.match('.*TX_POLL_.*', line)
    if m:
        cnt = counters.setdefault('poll_tx', 0)
        counters['poll_tx'] = cnt + 1
        return
        
def process_node_line(counters, line):
    # Count the pkts sent
    m = re.match('.*NODE\((\d+)\)::TX_DATA_.*', line)
    if m:
        n_id = int(m.group(1))
        
        tot = counters.setdefault('pkt_tx_total', 0)
        pernode = counters.setdefault('pkt_tx_node', dict())
        node = pernode.setdefault(n_id, 0)
        
        counters['pkt_tx_total'] = tot + 1
        pernode[n_id] = node + 1
        return
    
    # Count the pkts generated by the app layer
    m = re.match('.*NODE\((\d+)\)::RECV_FROM_U_LAYERS_.*', line)
    if m:
        n_id = int(m.group(1))
        
        tot = counters.setdefault('pkt_tx_app_total', 0)
        pernode = counters.setdefault('pkt_tx_app_node', dict())
        node = pernode.setdefault(n_id, 0)
        
        counters['pkt_tx_app_total'] = tot + 1
        pernode[n_id] = node + 1
        return

    # Count the probe pkts sent
    m = re.match('.*TX_PROBE_.*', line)
    if m:
        cnt = counters.setdefault('probe_tx', 0)
        counters['probe_tx'] = cnt + 1
        return
    
LOGDIR = './uwpolling_logs'
EXP_IDS = [35, 40]
NODE_IDS = range(1,5)
AUV_ID = 5

counters_all = dict()
for exp_id in EXP_IDS:
    dname = os.path.join(LOGDIR, str(exp_id))
    counters = counters_all.setdefault(exp_id, dict())

    fname_auv = os.path.join(dname, log_filename('AUV', AUV_ID, exp_id))
    process_logfile(fname_auv, process_auv_line, counters)

    for i in NODE_IDS:
        fname_node = os.path.join(dname, log_filename('NODE', i, exp_id))
        process_logfile(fname_node, process_node_line, counters)

for exp_id in EXP_IDS:
    print('Experiment %d' % exp_id)
    counters = counters_all[exp_id]
    
    # PDR at MAC layer
    pdr_mac_tot = counters['pkt_rx_total'] / counters['pkt_tx_total']
    print('Global PDR at MAC layer = %f' % pdr_mac_tot)
    for n_id in NODE_IDS:
        pdr_mac_node = (counters['pkt_rx_node'][n_id] /
                       counters['pkt_tx_node'][n_id])
        print('PDR at MAC layer for node %d = %f' % (n_id, pdr_mac_node))

    # PDR at app layer
    pdr_app_tot = counters['pkt_rx_total'] / counters['pkt_tx_app_total']
    print('Global PDR at app layer = %f' % pdr_app_tot)
    for n_id in NODE_IDS:
        pdr_app_node = (counters['pkt_rx_node'][n_id] /
                       counters['pkt_tx_app_node'][n_id])
        print('PDR at app layer for node %d = %f' % (n_id, pdr_app_node))

    # Throughput
    thr_tot = counters['pkt_rx_total'] / counters['last_auv_time']
    thr_tot *= 60
    print('Global throughput = %f pkts/min' % thr_tot)
    for n_id in NODE_IDS:
        thr_node = counters['pkt_rx_node'][n_id] / counters['last_auv_time']
        thr_node *= 60
        print('Throughput for node %d = %f pkts/min' % (n_id, thr_node))

    # Overhead
    txed_control_bits = (48 * counters['trigger_tx'] + 72 * counters['probe_tx'] +
                         24 * counters['poll_tx'] + 61 * counters['pkt_tx_total'])
    overhead = txed_control_bits / counters['pkt_rx_total']
    print('Overhead = %f bits/pkt' % overhead)
    print('')
print(counters_all)
